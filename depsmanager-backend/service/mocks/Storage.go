// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	depsmanager "depsmanager"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// AddDependency provides a mock function with given fields: ctx, projectName, version, dep
func (_m *Storage) AddDependency(ctx context.Context, projectName string, version string, dep depsmanager.Dependency) error {
	ret := _m.Called(ctx, projectName, version, dep)

	if len(ret) == 0 {
		panic("no return value specified for AddDependency")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, depsmanager.Dependency) error); ok {
		r0 = rf(ctx, projectName, version, dep)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDependency provides a mock function with given fields: ctx, projectName, version, depName
func (_m *Storage) DeleteDependency(ctx context.Context, projectName string, version string, depName string) error {
	ret := _m.Called(ctx, projectName, version, depName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDependency")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, projectName, version, depName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProject provides a mock function with given fields: ctx, projectName, version
func (_m *Storage) DeleteProject(ctx context.Context, projectName string, version string) error {
	ret := _m.Called(ctx, projectName, version)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectName, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDependenciesByExactScore provides a mock function with given fields: ctx, score
func (_m *Storage) GetDependenciesByExactScore(ctx context.Context, score float64) ([]string, error) {
	ret := _m.Called(ctx, score)

	if len(ret) == 0 {
		panic("no return value specified for GetDependenciesByExactScore")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float64) ([]string, error)); ok {
		return rf(ctx, score)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64) []string); ok {
		r0 = rf(ctx, score)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64) error); ok {
		r1 = rf(ctx, score)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsByDependency provides a mock function with given fields: ctx, depName
func (_m *Storage) GetProjectsByDependency(ctx context.Context, depName string) ([]depsmanager.Project, error) {
	ret := _m.Called(ctx, depName)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsByDependency")
	}

	var r0 []depsmanager.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]depsmanager.Project, error)); ok {
		return rf(ctx, depName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []depsmanager.Project); ok {
		r0 = rf(ctx, depName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]depsmanager.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, depName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjectDependencies provides a mock function with given fields: ctx, projectName, version
func (_m *Storage) ListProjectDependencies(ctx context.Context, projectName string, version string) ([]depsmanager.Dependency, error) {
	ret := _m.Called(ctx, projectName, version)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectDependencies")
	}

	var r0 []depsmanager.Dependency
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]depsmanager.Dependency, error)); ok {
		return rf(ctx, projectName, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []depsmanager.Dependency); ok {
		r0 = rf(ctx, projectName, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]depsmanager.Dependency)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectName, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx
func (_m *Storage) ListProjects(ctx context.Context) ([]depsmanager.Project, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 []depsmanager.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]depsmanager.Project, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []depsmanager.Project); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]depsmanager.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreDependencies provides a mock function with given fields: ctx, deps
func (_m *Storage) StoreDependencies(ctx context.Context, deps depsmanager.ProjectDependencyRecord) error {
	ret := _m.Called(ctx, deps)

	if len(ret) == 0 {
		panic("no return value specified for StoreDependencies")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, depsmanager.ProjectDependencyRecord) error); ok {
		r0 = rf(ctx, deps)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDependency provides a mock function with given fields: ctx, projectName, version, dep
func (_m *Storage) UpdateDependency(ctx context.Context, projectName string, version string, dep depsmanager.Dependency) error {
	ret := _m.Called(ctx, projectName, version, dep)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDependency")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, depsmanager.Dependency) error); ok {
		r0 = rf(ctx, projectName, version, dep)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
