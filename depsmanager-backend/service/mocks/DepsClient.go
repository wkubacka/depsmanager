// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	depsmanager "depsmanager"

	mock "github.com/stretchr/testify/mock"
)

// DepsClient is an autogenerated mock type for the DepsClient type
type DepsClient struct {
	mock.Mock
}

// GetProjectDependencies provides a mock function with given fields: ctx, system, project, version
func (_m *DepsClient) GetProjectDependencies(ctx context.Context, system string, project string, version string) (*depsmanager.DepsProjectDependenciesResp, error) {
	ret := _m.Called(ctx, system, project, version)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectDependencies")
	}

	var r0 *depsmanager.DepsProjectDependenciesResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*depsmanager.DepsProjectDependenciesResp, error)); ok {
		return rf(ctx, system, project, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *depsmanager.DepsProjectDependenciesResp); ok {
		r0 = rf(ctx, system, project, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*depsmanager.DepsProjectDependenciesResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, system, project, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectVersions provides a mock function with given fields: ctx, project
func (_m *DepsClient) GetProjectVersions(ctx context.Context, project string) (*depsmanager.DepsGetVersionResp, error) {
	ret := _m.Called(ctx, project)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectVersions")
	}

	var r0 *depsmanager.DepsGetVersionResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*depsmanager.DepsGetVersionResp, error)); ok {
		return rf(ctx, project)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *depsmanager.DepsGetVersionResp); ok {
		r0 = rf(ctx, project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*depsmanager.DepsGetVersionResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsBatch provides a mock function with given fields: ctx, projects
func (_m *DepsClient) GetProjectsBatch(ctx context.Context, projects []string) (*depsmanager.DepsGetProjectBatchResp, error) {
	ret := _m.Called(ctx, projects)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsBatch")
	}

	var r0 *depsmanager.DepsGetProjectBatchResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) (*depsmanager.DepsGetProjectBatchResp, error)); ok {
		return rf(ctx, projects)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) *depsmanager.DepsGetProjectBatchResp); ok {
		r0 = rf(ctx, projects)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*depsmanager.DepsGetProjectBatchResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, projects)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersionsBatch provides a mock function with given fields: ctx, projects
func (_m *DepsClient) GetVersionsBatch(ctx context.Context, projects []depsmanager.ProjectDependencies) (*depsmanager.DepsGetVersionsBatchResp, error) {
	ret := _m.Called(ctx, projects)

	if len(ret) == 0 {
		panic("no return value specified for GetVersionsBatch")
	}

	var r0 *depsmanager.DepsGetVersionsBatchResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []depsmanager.ProjectDependencies) (*depsmanager.DepsGetVersionsBatchResp, error)); ok {
		return rf(ctx, projects)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []depsmanager.ProjectDependencies) *depsmanager.DepsGetVersionsBatchResp); ok {
		r0 = rf(ctx, projects)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*depsmanager.DepsGetVersionsBatchResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []depsmanager.ProjectDependencies) error); ok {
		r1 = rf(ctx, projects)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDepsClient creates a new instance of DepsClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDepsClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *DepsClient {
	mock := &DepsClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
