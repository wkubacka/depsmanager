// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	depsmanager "depsmanager"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// AddDependency provides a mock function with given fields: ctx, projectName, version, dep
func (_m *Service) AddDependency(ctx context.Context, projectName string, version string, dep depsmanager.Dependency) error {
	ret := _m.Called(ctx, projectName, version, dep)

	if len(ret) == 0 {
		panic("no return value specified for AddDependency")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, depsmanager.Dependency) error); ok {
		r0 = rf(ctx, projectName, version, dep)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDependency provides a mock function with given fields: ctx, projectName, version, depName
func (_m *Service) DeleteDependency(ctx context.Context, projectName string, version string, depName string) error {
	ret := _m.Called(ctx, projectName, version, depName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDependency")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, projectName, version, depName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProject provides a mock function with given fields: ctx, projectName, version
func (_m *Service) DeleteProject(ctx context.Context, projectName string, version string) error {
	ret := _m.Called(ctx, projectName, version)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectName, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchAndStoreProjectDependencies provides a mock function with given fields: ctx, projectName, version
func (_m *Service) FetchAndStoreProjectDependencies(ctx context.Context, projectName string, version string) error {
	ret := _m.Called(ctx, projectName, version)

	if len(ret) == 0 {
		panic("no return value specified for FetchAndStoreProjectDependencies")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectName, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDependenciesByExactScore provides a mock function with given fields: ctx, score
func (_m *Service) GetDependenciesByExactScore(ctx context.Context, score float64) ([]string, error) {
	ret := _m.Called(ctx, score)

	if len(ret) == 0 {
		panic("no return value specified for GetDependenciesByExactScore")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, float64) ([]string, error)); ok {
		return rf(ctx, score)
	}
	if rf, ok := ret.Get(0).(func(context.Context, float64) []string); ok {
		r0 = rf(ctx, score)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, float64) error); ok {
		r1 = rf(ctx, score)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProjectsByDependency provides a mock function with given fields: ctx, depName
func (_m *Service) GetProjectsByDependency(ctx context.Context, depName string) ([]depsmanager.Project, error) {
	ret := _m.Called(ctx, depName)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsByDependency")
	}

	var r0 []depsmanager.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]depsmanager.Project, error)); ok {
		return rf(ctx, depName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []depsmanager.Project); ok {
		r0 = rf(ctx, depName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]depsmanager.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, depName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDependencies provides a mock function with given fields: ctx, projectName, version
func (_m *Service) ListDependencies(ctx context.Context, projectName string, version string) (depsmanager.ListDependenciesResponse, error) {
	ret := _m.Called(ctx, projectName, version)

	if len(ret) == 0 {
		panic("no return value specified for ListDependencies")
	}

	var r0 depsmanager.ListDependenciesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (depsmanager.ListDependenciesResponse, error)); ok {
		return rf(ctx, projectName, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) depsmanager.ListDependenciesResponse); ok {
		r0 = rf(ctx, projectName, version)
	} else {
		r0 = ret.Get(0).(depsmanager.ListDependenciesResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectName, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjectVersions provides a mock function with given fields: ctx, projectName
func (_m *Service) ListProjectVersions(ctx context.Context, projectName string) ([]string, error) {
	ret := _m.Called(ctx, projectName)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectVersions")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, projectName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, projectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx
func (_m *Service) ListProjects(ctx context.Context) ([]depsmanager.Project, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 []depsmanager.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]depsmanager.Project, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []depsmanager.Project); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]depsmanager.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDependency provides a mock function with given fields: ctx, projectName, version, dep
func (_m *Service) UpdateDependency(ctx context.Context, projectName string, version string, dep depsmanager.Dependency) error {
	ret := _m.Called(ctx, projectName, version, dep)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDependency")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, depsmanager.Dependency) error); ok {
		r0 = rf(ctx, projectName, version, dep)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
